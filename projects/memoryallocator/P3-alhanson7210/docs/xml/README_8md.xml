<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Project<sp/>3:<sp/>Memory<sp/>Allocator</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See:<sp/>https://www.cs.usfca.edu/~mmalensek/cs326/assignments/project-3.html<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Writer:<sp/>Alex<sp/>Hanson*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">University<sp/>of<sp/>San<sp/>Francisco</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CS<sp/>326<sp/>Operating<sp/>Systems</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>About<sp/>This<sp/>Project:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_CREATING<sp/>A<sp/>MEMORY<sp/>ALLOCATOR<sp/>FOR<sp/>MEMORY<sp/>MANAGEMENT<sp/>FOR<sp/>AN<sp/>OPERATING<sp/>SYSTEM<sp/>BY<sp/>USING<sp/></highlight></codeline>
<codeline><highlight class="normal">OR<sp/>CREATING<sp/>THE<sp/>NECESSARY<sp/>SYSTEM<sp/>CALLS<sp/>TO<sp/>ALLOCATE<sp/>AND<sp/>FREE<sp/>MEMORY<sp/>ACCORDINGLY_</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Memory<sp/>Allocator*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>program<sp/>allocates<sp/>a<sp/>page<sp/>of<sp/>space<sp/>or<sp/>reuses<sp/>a<sp/>given<sp/>block<sp/>of<sp/>pre-allocated<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>memory<sp/>that<sp/>the<sp/>user<sp/>will<sp/>use<sp/>based<sp/>of<sp/>a<sp/>given<sp/>request<sp/>size<sp/>which<sp/>will<sp/>also<sp/>have<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>the<sp/>mem_block<sp/>attached<sp/>before<sp/>that<sp/>allocated<sp/>memory<sp/>request</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Managing<sp/>Memory*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>In<sp/>order<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>memory<sp/>when<sp/>a<sp/>user<sp/>wants<sp/>to<sp/>free<sp/>or<sp/>malloc<sp/>memory(et<sp/>al)</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>is<sp/>done<sp/>by<sp/>have<sp/>a<sp/>linked<sp/>list<sp/>of<sp/>memory<sp/>that<sp/>memory<sp/>blocks<sp/>get<sp/>added<sp/>or<sp/>deleted<sp/>from.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>First<sp/>fit:<sp/>looks<sp/>for<sp/>the<sp/>first<sp/>block<sp/>size<sp/>that<sp/>fits<sp/>the<sp/>memory<sp/>request</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Best<sp/>fit:<sp/>looks<sp/>for<sp/>the<sp/>minimum<sp/>block<sp/>size<sp/>that<sp/>fits<sp/>the<sp/>memory<sp/>request</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Worst<sp/>fit:<sp/>looks<sp/>for<sp/>the<sp/>maximum<sp/>block<sp/>size<sp/>that<sp/>fits<sp/>the<sp/>memory<sp/>request<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Allocating<sp/>Memory*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>MMAP<sp/>is<sp/>used<sp/>to<sp/>allocate<sp/>memory<sp/>more<sp/>flexibly<sp/>than<sp/>sbrk<sp/>or<sp/>brk,<sp/>but<sp/>it<sp/>also<sp/>requires</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>more<sp/>parameters<sp/>to<sp/>be<sp/>filled.<sp/>Overflow<sp/>is<sp/>checked<sp/>in<sp/>calloc,<sp/>M_MMAP_THRESHOLD<sp/>is</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>is<sp/>checked<sp/>for<sp/>in<sp/>malloc,<sp/>and<sp/>ENOMEM<sp/>can<sp/>additional<sp/>handled<sp/>in<sp/>realloc,<sp/>and<sp/>lastly</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>you<sp/>can<sp/>check<sp/>for<sp/>SIZE_MAX<sp/>if<sp/>a<sp/>memory<sp/>request<sp/>is<sp/>too<sp/>large<sp/>as<sp/>well<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Freeing<sp/>Memory*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>way<sp/>freeing<sp/>is<sp/>managed<sp/>is<sp/>by<sp/>checking<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>to<sp/>see<sp/>if<sp/>it<sp/>is<sp/>g_head<sp/>or<sp/>not</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>If<sp/>it<sp/>is,<sp/>this<sp/>requires<sp/>going<sp/>through<sp/>the<sp/>linked<sp/>list<sp/>and<sp/>simultaneously<sp/>checking<sp/>the<sp/>region</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>for<sp/>all<sp/>its<sp/>blocks<sp/>having<sp/>a<sp/>usage<sp/>of<sp/>0.<sp/>If<sp/>at<sp/>any<sp/>point<sp/>the<sp/>usage<sp/>doesn&apos;t<sp/>equal<sp/>zero,<sp/>simply</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>return;<sp/>otherwise,<sp/>the<sp/>region<sp/>actual<sp/>has<sp/>to<sp/>be<sp/>unmmapped.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>If<sp/>it&apos;s<sp/>not<sp/>g_head,<sp/>this<sp/>requires<sp/>finding<sp/>the<sp/>previous<sp/>regions<sp/>last<sp/>block<sp/>and<sp/>the<sp/>the<sp/>next</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>regions<sp/>first<sp/>block.<sp/>If<sp/>at<sp/>any<sp/>point<sp/>the<sp/>usage<sp/>doesn&apos;t<sp/>equal<sp/>zero,<sp/>simply</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>return;<sp/>otherwise,<sp/>the<sp/>region<sp/>actual<sp/>has<sp/>to<sp/>be<sp/>unmmapped<sp/>as<sp/>well.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Depending<sp/>on<sp/>the<sp/>case,<sp/>g_head<sp/>or<sp/>some<sp/>other<sp/>randomly<sp/>placed<sp/>block<sp/>is<sp/>unmapped,<sp/>and<sp/>the<sp/>linked</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>list<sp/>is<sp/>fixed<sp/>in<sp/>place</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Reallocating<sp/>Memory*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>If<sp/>the<sp/>block<sp/>can<sp/>be<sp/>resized<sp/>in<sp/>place,<sp/>we<sp/>can<sp/>simply<sp/>change<sp/>the<sp/>usage;<sp/>otherwise<sp/>we<sp/>need<sp/>to</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>malloc<sp/>space<sp/>for<sp/>a<sp/>new<sp/>block,<sp/>copy<sp/>the<sp/>old<sp/>one<sp/>to<sp/>the<sp/>new,<sp/>free<sp/>the<sp/>old<sp/>one,<sp/>and<sp/>return<sp/>the<sp/>new</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Basic<sp/>Functionality<sp/>Overview*</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Simple<sp/>allocator<sp/>(one<sp/>block<sp/>per<sp/>region)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>2.<sp/>print_memory()<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3.<sp/>Verified(correct)<sp/>linked<sp/>list<sp/>sequence<sp/>and<sp/>visualization</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>4.<sp/>Scribbling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>5.<sp/>Free<sp/>space<sp/>management<sp/>algorithms</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Extra<sp/>Features*</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Named<sp/>Blocks:<sp/>to<sp/>help<sp/>with<sp/>debugging,<sp/>you<sp/>can<sp/>optionally<sp/>provide<sp/>a<sp/>name<sp/>for<sp/>each<sp/>allocation.<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>These<sp/>names<sp/>will<sp/>be<sp/>shown<sp/>when<sp/>state<sp/>information<sp/>is<sp/>printed.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Memory<sp/>State<sp/>Information:<sp/>your<sp/>allocator<sp/>should<sp/>be<sp/>able<sp/>to<sp/>print<sp/>out<sp/>the<sp/>current<sp/>state<sp/>of<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>the<sp/>regions<sp/>and<sp/>blocks<sp/>with<sp/>the<sp/>print_memory()<sp/>function.<sp/>See<sp/>the<sp/>format<sp/>below:</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>File<sp/>Logging:<sp/>You<sp/>should<sp/>also<sp/>be<sp/>able<sp/>to<sp/>write<sp/>the<sp/>same<sp/>contents<sp/>printed<sp/>by<sp/>print_memory<sp/>to<sp/>a<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Scribbling:<sp/>free()<sp/>leaves<sp/>old<sp/>values<sp/>in<sp/>memory<sp/>without<sp/>cleaning<sp/>them<sp/>up.<sp/>When<sp/>the<sp/>ALLOCATOR_SCRIBBLE<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>environment<sp/>variable<sp/>is<sp/>set<sp/>to<sp/>1,<sp/>you<sp/>will<sp/>fill<sp/>any<sp/>new<sp/>allocation<sp/>with<sp/>0xAA<sp/>(10101010<sp/>in<sp/>binary).<sp/></highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>This<sp/>means<sp/>that<sp/>if<sp/>a<sp/>program<sp/>assumes<sp/>memory<sp/>allocated<sp/>by<sp/>malloc<sp/>is<sp/>zeroed<sp/>out,<sp/>it<sp/>will<sp/>crash</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Visualizations:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">--<sp/>Current<sp/>Memory<sp/>State<sp/>--</highlight></codeline>
<codeline><highlight class="normal">[REGION]<sp/>0x7fdb7f7cc000-0x7fdb7f7cd000<sp/>4096</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc000-0x7fdb7f7cc248<sp/>(0)<sp/>&apos;Test<sp/>Allocation:<sp/>0&apos;<sp/>584<sp/>584<sp/>504</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc248-0x7fdb7f7cc4f0<sp/>(5)<sp/>&apos;Test<sp/>Allocation:<sp/>5&apos;<sp/>680<sp/>680<sp/>600</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc4f0-0x7fdb7f7cc5d8<sp/>(6)<sp/>&apos;Test<sp/>Allocation:<sp/>6&apos;<sp/>232<sp/>232<sp/>152</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc5d8-0x7fdb7f7cc680<sp/>(7)<sp/>&apos;Test<sp/>Allocation:<sp/>7&apos;<sp/>168<sp/>136<sp/>56</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc680-0x7fdb7f7cc7d0<sp/>(2)<sp/>&apos;Test<sp/>Allocation:<sp/>2&apos;<sp/>336<sp/>336<sp/>256</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc7d0-0x7fdb7f7cc948<sp/>(3)<sp/>&apos;Test<sp/>Allocation:<sp/>3&apos;<sp/>376<sp/>0<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7cc948-0x7fdb7f7cd000<sp/>(4)<sp/>&apos;Test<sp/>Allocation:<sp/>4&apos;<sp/>1720<sp/>584<sp/>504</highlight></codeline>
<codeline><highlight class="normal">[REGION]<sp/>0x7fdb7f7a1000-0x7fdb7f7a3000<sp/>8192</highlight></codeline>
<codeline><highlight class="normal">[BLOCK]<sp/><sp/>0x7fdb7f7a1000-0x7fdb7f7a3000<sp/>(8)<sp/>&apos;mem_block&apos;<sp/>8192<sp/>4176<sp/>4096</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Program<sp/>Options:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">LD_PRELOAD=$(pwd)/allocator.so<sp/>command</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">allocation.h</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>--<sp/>Helper<sp/>functions<sp/>--<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">void<sp/>print_memory(void);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>write_memory(FILE<sp/>*<sp/>fp);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*reuse(size_t<sp/>size);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*malloc_name(size_t<sp/>size,<sp/>char<sp/>*<sp/>name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*<sp/>--<sp/>C<sp/>Memory<sp/>API<sp/>functions<sp/>--<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*malloc(size_t<sp/>size);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>free(void<sp/>*ptr);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*calloc(size_t<sp/>nmemb,<sp/>size_t<sp/>size);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*realloc(void<sp/>*ptr,<sp/>size_t<sp/>size);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Data<sp/>Structures<sp/>and<sp/>Globals:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Defines<sp/>metadata<sp/>structure<sp/>for<sp/>both<sp/>memory<sp/>&apos;regions&apos;<sp/>and<sp/>&apos;blocks.&apos;<sp/>This</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>structure<sp/>is<sp/>prefixed<sp/>before<sp/>each<sp/>allocation&apos;s<sp/>data<sp/>area.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>mem_block<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Each<sp/>allocation<sp/>is<sp/>given<sp/>a<sp/>unique<sp/>ID<sp/>number.<sp/>If<sp/>an<sp/>allocation<sp/>is<sp/>split<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>two,<sp/>then<sp/>the<sp/>resulting<sp/>new<sp/>block<sp/>will<sp/>be<sp/>given<sp/>a<sp/>new<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>alloc_id;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>name<sp/>of<sp/>this<sp/>memory<sp/>block.<sp/>If<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>specify<sp/>a<sp/>name<sp/>for<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>block,<sp/>it<sp/>should<sp/>be<sp/>auto-generated<sp/>based<sp/>on<sp/>the<sp/>allocation<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>name[32];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**<sp/>Size<sp/>of<sp/>the<sp/>memory<sp/>region<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**<sp/>Space<sp/>used;<sp/>if<sp/>usage<sp/>==<sp/>0,<sp/>then<sp/>the<sp/>block<sp/>has<sp/>been<sp/>freed.<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>usage;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Pointer<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>mapped<sp/>memory<sp/>region.<sp/>This<sp/>simplifies<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>process<sp/>of<sp/>finding<sp/>where<sp/>memory<sp/>mappings<sp/>begin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>mem_block<sp/>*region_start;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>this<sp/>block<sp/>is<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>mapped<sp/>memory<sp/>region,<sp/>the<sp/>region_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>member<sp/>indicates<sp/>the<sp/>size<sp/>of<sp/>the<sp/>mapping.<sp/>In<sp/>subsequent<sp/>(split)<sp/>blocks,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>is<sp/>undefined.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>region_size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**<sp/>Next<sp/>block<sp/>in<sp/>the<sp/>chain<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>mem_block<sp/>*next;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>struct<sp/>mem_block<sp/>*g_head<sp/>=<sp/>NULL;<sp/>/*!&lt;<sp/>Start<sp/>(head)<sp/>of<sp/>our<sp/>linked<sp/>list<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">static<sp/>unsigned<sp/>long<sp/>g_allocations<sp/>=<sp/>0;<sp/>/*!&lt;<sp/>Allocation<sp/>counter<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>compile<sp/>and<sp/>use<sp/>the<sp/>allocator:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">LD_PRELOAD=$(pwd)/allocator.so<sp/>ls<sp/>/</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(in<sp/>this<sp/>example,<sp/>the<sp/>command<sp/>`ls<sp/>/`<sp/>is<sp/>run<sp/>with<sp/>the<sp/>custom<sp/>memory<sp/>allocator<sp/>instead<sp/>of<sp/>the<sp/>default).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ls<sp/>/</highlight></codeline>
<codeline><highlight class="normal">bin<sp/><sp/>boot<sp/><sp/>dev<sp/><sp/>etc<sp/><sp/>home<sp/><sp/>lib<sp/><sp/>lib64<sp/><sp/>mnt<sp/><sp/>opt<sp/><sp/>proc<sp/><sp/>root<sp/><sp/>run<sp/><sp/>sbin<sp/><sp/>secret<sp/><sp/>srv<sp/><sp/>sys<sp/><sp/>tmp<sp/><sp/>usr<sp/><sp/>var</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Testing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>execute<sp/>the<sp/>test<sp/>cases,<sp/>use<sp/>`make<sp/>test`.<sp/>To<sp/>pull<sp/>in<sp/>updated<sp/>test<sp/>cases,<sp/>run<sp/>`make<sp/>testupdate`.<sp/>You<sp/>can<sp/>also<sp/>run<sp/>a<sp/>specific<sp/>test<sp/>case<sp/>instead<sp/>of<sp/>all<sp/>of<sp/>them:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>make<sp/>test</highlight></codeline>
<codeline><highlight class="normal">./tests/run_tests</highlight></codeline>
<codeline><highlight class="normal">Building<sp/>test<sp/>programs</highlight></codeline>
<codeline><highlight class="normal">make[1]:<sp/>Entering<sp/>directory<sp/>&apos;/home/alhanson/projects/prj3/P3-alhanson7210/tests/progs&apos;</highlight></codeline>
<codeline><highlight class="normal">make[1]:<sp/>Nothing<sp/>to<sp/>be<sp/>done<sp/>for<sp/>&apos;all&apos;.</highlight></codeline>
<codeline><highlight class="normal">make[1]:<sp/>Leaving<sp/>directory<sp/>&apos;/home/alhanson/projects/prj3/P3-alhanson7210/tests/progs&apos;</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>Tests:<sp/>(v9)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>01<sp/>ls<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>02<sp/>Free<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>03<sp/>Basic<sp/>First<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>04<sp/>Basic<sp/>Best<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>05<sp/>Basic<sp/>Worst<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>06<sp/>First<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>07<sp/>Best<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>08<sp/>Worst<sp/>Fit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>09<sp/>Scribbling<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>10<sp/>Thread<sp/>Safety<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/>FAIL<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>11<sp/>print_memory()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>12<sp/>write_memory()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>13<sp/>Unix<sp/>Utilities<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/>FAIL<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>15<sp/>Static<sp/>Analysis<sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>16<sp/>Documentation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>17<sp/>Thanks<sp/>for<sp/>Trying<sp/><sp/><sp/><sp/>[1<sp/>pts]<sp/><sp/>[<sp/><sp/>OK<sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">Execution<sp/>complete.<sp/>[14/16<sp/>pts]<sp/>(87.5%)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Program<sp/>Output</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ls<sp/>-lrt</highlight></codeline>
<codeline><highlight class="normal">total<sp/>5332</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/><sp/>642<sp/>Nov<sp/><sp/>5<sp/>13:58<sp/>README.md</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/>2135<sp/>Nov<sp/><sp/>5<sp/>13:58<sp/>debug.h</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/>2053<sp/>Nov<sp/>20<sp/>02:53<sp/>allocator.h</highlight></codeline>
<codeline><highlight class="normal">drwxr-xr-x<sp/>4<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/>4096<sp/>Nov<sp/>20<sp/>20:21<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/>23688<sp/>Nov<sp/>20<sp/>22:06<sp/>allocator.c</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/><sp/>552<sp/>Nov<sp/>20<sp/>22:11<sp/>Makefile</highlight></codeline>
<codeline><highlight class="normal">-rwxr-xr-x<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/>24432<sp/>Nov<sp/>20<sp/>22:11<sp/>allocator.so</highlight></codeline>
<codeline><highlight class="normal">drwxr-xr-x<sp/>5<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/><sp/><sp/>42<sp/>Nov<sp/>20<sp/>22:11<sp/>docs</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/><sp/><sp/>595<sp/>Nov<sp/>20<sp/>22:11<sp/>test-memory-output-file.txt</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/>3062864<sp/>Nov<sp/>20<sp/>22:11<sp/>allocator.h.gch</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/>2258224<sp/>Nov<sp/>20<sp/>22:11<sp/>debug.h.gch</highlight></codeline>
<codeline><highlight class="normal">-rwxr-xr-x<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/>29592<sp/>Nov<sp/>20<sp/>22:11<sp/>a.out</highlight></codeline>
<codeline><highlight class="normal">-rw-r--r--<sp/>1<sp/>alhanson<sp/>alhanson<sp/><sp/><sp/>25461<sp/>Nov<sp/>20<sp/>22:11<sp/>test-output.md</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>free</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/><sp/><sp/><sp/><sp/><sp/>shared<sp/><sp/>buff/cache<sp/><sp/><sp/>available</highlight></codeline>
<codeline><highlight class="normal">Mem:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1008272<sp/><sp/><sp/><sp/><sp/><sp/><sp/>77156<sp/><sp/><sp/><sp/><sp/><sp/>807652<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>400<sp/><sp/><sp/><sp/><sp/><sp/>123464<sp/><sp/><sp/><sp/><sp/><sp/>797800</highlight></codeline>
<codeline><highlight class="normal">Swap:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZE</highlight></codeline>
<codeline><highlight class="normal">4096</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>echo<sp/>&quot;code<sp/>works,<sp/>what!!!!!!!!!&quot;</highlight></codeline>
<codeline><highlight class="normal">LD_PRELOAD=./allocator.so<sp/>echo<sp/>&quot;code<sp/>works,<sp/>whatLD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZE!&quot;</highlight></codeline>
<codeline><highlight class="normal">code<sp/>works,<sp/>whatLD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZELD_PRELOAD=./allocator.so<sp/>getconf<sp/>PAGE_SIZE!</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ls<sp/>/</highlight></codeline>
<codeline><highlight class="normal">bin<sp/><sp/>boot<sp/><sp/>dev<sp/><sp/>etc<sp/><sp/>home<sp/><sp/>lib<sp/><sp/>lib64<sp/><sp/>mnt<sp/><sp/>opt<sp/><sp/>proc<sp/><sp/>root<sp/><sp/>run<sp/><sp/>sbin<sp/><sp/>secret<sp/><sp/>srv<sp/><sp/>sys<sp/><sp/>tmp<sp/><sp/>usr<sp/><sp/>var</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ps</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PID<sp/>TTY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIME<sp/>CMD</highlight></codeline>
<codeline><highlight class="normal"><sp/>2673<sp/>pts/0<sp/><sp/><sp/><sp/>00:00:01<sp/>bash</highlight></codeline>
<codeline><highlight class="normal">32137<sp/>pts/0<sp/><sp/><sp/><sp/>00:00:00<sp/>ps</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>touch<sp/>power_move.txt</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ls</highlight></codeline>
<codeline><highlight class="normal">allocator.c<sp/><sp/>allocator.h.gch<sp/><sp/>a.out<sp/><sp/><sp/><sp/>debug.h.gch<sp/><sp/>Makefile<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>README.md<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test-output.md</highlight></codeline>
<codeline><highlight class="normal">allocator.h<sp/><sp/>allocator.so<sp/><sp/><sp/><sp/><sp/>debug.h<sp/><sp/>docs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power_move.txt<sp/><sp/>test-memory-output-file.txt<sp/><sp/>tests</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>rm<sp/>power_move.txt</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$<sp/>LD_PRELOAD=./allocator.so<sp/>ls</highlight></codeline>
<codeline><highlight class="normal">allocator.c<sp/><sp/>allocator.h<sp/><sp/>allocator.h.gch<sp/><sp/>allocator.so<sp/><sp/>a.out<sp/><sp/>debug.h<sp/><sp/>debug.h.gch<sp/><sp/>docs<sp/><sp/>Makefile<sp/><sp/>README.md<sp/><sp/>test-memory-output-file.txt<sp/><sp/>test-output.md<sp/><sp/>tests</highlight></codeline>
<codeline><highlight class="normal">[alhanson@alhanson7210<sp/>P3-alhanson7210]$</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Running<sp/>one<sp/>or<sp/>multiple<sp/>cases:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>all<sp/>test<sp/>cases:</highlight></codeline>
<codeline><highlight class="normal">make<sp/>test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>a<sp/>specific<sp/>test<sp/>case:</highlight></codeline>
<codeline><highlight class="normal">make<sp/>test<sp/>run=4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>a<sp/>few<sp/>specific<sp/>test<sp/>cases<sp/>(4,<sp/>8,<sp/>and<sp/>12<sp/>in<sp/>this<sp/>case):</highlight></codeline>
<codeline><highlight class="normal">make<sp/>test<sp/>run=&apos;4<sp/>8<sp/>12&apos;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
